# Generated by Django 4.2.1 on 2023-07-28 12:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_archive_avaliable', models.BooleanField(help_text='Доступ к архиву', verbose_name='Доступ к архиву')),
                ('test_period_until', models.DateTimeField(help_text='Тестовый период до', verbose_name='Дата окончания тестового периода')),
                ('tel_number', models.IntegerField(help_text='Введите мобильный телефон', verbose_name='Мобильный телефон')),
                ('is_spam_allowed', models.BooleanField(default=False, help_text='Получать уведомления', verbose_name='Разрешение уведомлений')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Banking_account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.FloatField(verbose_name='Доступный баланс')),
                ('account_number', models.IntegerField(verbose_name='Номер счета')),
                ('inn_bank', models.IntegerField(verbose_name='ИНН банка')),
                ('ks_account', models.IntegerField(verbose_name='Корреспонденский счет банка')),
                ('bik_bank', models.IntegerField(verbose_name='БИК банка')),
                ('name_bank', models.CharField(help_text='Введите наименование банка', max_length=200, verbose_name='Наименование банка')),
                ('auto_payment', models.BooleanField(verbose_name='Автоплатеж')),
                ('linked_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Банковские реквизиты',
                'verbose_name_plural': 'Банковские реквизиты',
                'ordering': ('name_bank',),
            },
        ),
        migrations.CreateModel(
            name='Home',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(help_text='Введите индекс', null=True, verbose_name='Индекс')),
                ('city', models.CharField(help_text='Введите наименование города', max_length=100, null=True, verbose_name='Город')),
                ('street', models.CharField(help_text='Введите название улицы', max_length=100, null=True, verbose_name='Улица')),
                ('house_number', models.CharField(help_text='Введите номер дома', max_length=100, null=True, verbose_name='Номер дома')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адреса',
                'ordering': ('city',),
            },
        ),
        migrations.CreateModel(
            name='Pay_history',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actual_date', models.DateTimeField(verbose_name='Последняя дата движения по счету')),
                ('operation_sum', models.FloatField(default=0, verbose_name='Сумма операции')),
                ('linked_banking_account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='big_web_cam.banking_account')),
            ],
            options={
                'verbose_name': 'Движения по счету',
                'verbose_name_plural': 'Движения по счету',
                'ordering': ('linked_banking_account',),
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Дата выполнения операции')),
                ('income_balance', models.FloatField(verbose_name='Входящий остаток')),
                ('income_payment', models.FloatField(verbose_name='Поступление')),
                ('outcome_payment', models.FloatField(verbose_name='Списание')),
                ('outcome_balance', models.FloatField(verbose_name='Исходящий остаток')),
                ('linked_pay_history', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='big_web_cam.pay_history')),
            ],
            options={
                'verbose_name': 'Операция по счету',
                'verbose_name_plural': 'Операции по счету',
                'ordering': ('date',),
            },
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_ok', models.BooleanField(verbose_name='Статус работы')),
                ('is_availiable_places', models.BooleanField(verbose_name='Наличие вободных мест')),
                ('archive_file', models.FileField(blank=True, upload_to='', verbose_name='Файл архива')),
                ('linked_home', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='big_web_cam.home')),
            ],
            options={
                'verbose_name': 'Камера',
                'verbose_name_plural': 'Камеры',
                'ordering': ('is_ok',),
            },
        ),
        migrations.CreateModel(
            name='Availiable_place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_actual_status', models.BooleanField(verbose_name='Статус актуальности')),
                ('distance_to_home', models.FloatField(verbose_name='Расстояние до дома')),
                ('linked_camera', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='big_web_cam.camera')),
            ],
            options={
                'verbose_name': 'Доступное место',
                'verbose_name_plural': 'Доступные места',
                'ordering': ('is_actual_status',),
            },
        ),
        migrations.AddField(
            model_name='advuser',
            name='home',
            field=models.ManyToManyField(to='big_web_cam.home'),
        ),
        migrations.AddField(
            model_name='advuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
